apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.kuanquan.lintapplication"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // 移除lint检查的error，可以避免由于编译条件太过严格而编译不过的问题
//    lintOptions {
//        // 如果为 true，则当lint发现错误时停止 gradle构建 (默认为true)
//        abortOnError false
//        // 如果为 true，则只报告错误
//        ignoreWarnings true
//        // 不检查给定的问题id InvalidPackage: Package not included in Android
//        disable 'InvalidPackage'
//        // 不检查给定的问题id 资源类型错误
//        disable "ResourceType"
//        // 忽略因MissingTranslation导致Build Failed错误 "app_name"
//        disable 'MissingTranslation'
//        // 检查给定的问题 id
//        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
//        // * 仅 * 检查给定的问题 id
//        check 'NewApi', 'InlinedApi'
//        // 配置写入输出结果的位置；它可以是一个文件或 “stdout”（标准输出）
//        textOutput 'stdout'
//        // 如果为真，会生成一个XML报告，以给Jenkins之类的使用
//        xmlReport false
//        // 用于写入报告的文件（如果不指定，默认为lint-results.xml）
//        xmlOutput file("lint-report.xml")
//        // 如果为真，会生成一个HTML报告（包括问题的解释，存在此问题的源码，等等）
//        htmlReport true
//        // 写入报告的路径，它是可选的（默认为构建目录下的 lint-results.html ）
//        htmlOutput file("lint-report.html")
//        // 设置为 true， 将使所有release 构建都以issus的严重性级别为fatal
//        //（severity=false）的设置来运行lint
//        // 并且，如果发现了致命（fatal）的问题，将会中止构建
//        //（由上面提到的 abortOnError 控制）
//        checkReleaseBuilds true
//        // 设置给定问题的严重级别（severity）为fatal （这意味着他们将会
//        // 在release构建的期间检查 （即使 lint 要检查的问题没有包含在代码中)
//        fatal 'NewApi', 'InlineApi'
//        // 设置给定问题的严重级别为error
//        error 'Wakelock', 'TextViewEdits'
//        // 设置给定问题的严重级别为warning
//        warning 'ResourceAsColor'
//        // 设置给定问题的严重级别（severity）为ignore （和不检查这个问题一样）
//        ignore 'TypographyQuotes'
//        // 如果为 true，则检查所有的问题，包括默认不检查问题
//        checkAllWarnings true
//        // 重置 lint 配置（使用默认的严重性等设置）。
//        lintConfig file("default-lint.xml")
//        // 设置为 true，则当有错误时会显示文件的全路径或绝对路径 (默认情况下为true)
//        absolutePaths true
//    }

    task printClassesDir {
        doLast {
//            println sourceSets.main.output.classesDir
            println compileDebugJavaWithJavac.destinationDir
        }
    }

    lintOptions{
        // 如果lint检查遇到Error，就停止构建
        abortOnError true
    }

    // 让assemble任务依赖于lint检查，即每次执行assemble任务时都会启动lint检查
    // Lint检查是需要消耗时间的，不可避免地会造成项目构建速度变慢
    applicationVariants.all { variant ->
        def lintTask = tasks["lint${variant.name.capitalize()}"]
        variant.getAssembleProvider().configure(){
            it.dependsOn lintTask
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // 测试 lint 检查第三方依赖库专用
    implementation 'com.yanzhenjie:permission:2.0.0-rc4'

    implementation project(path: ':lintlibrary')
//    implementation (name:'lintlibrary-debug', ext:'aar')
}

repositories {
    flatDir {
        dirs 'libs' // aar用到
    }
}